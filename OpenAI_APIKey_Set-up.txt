Step 1: Set Up Environment Variable
Before running your Flask application, set the environment variable for your OpenAI API key. You can do this in your terminal or command prompt.

For Linux/Mac:
bash
export OPENAI_API_KEY="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"

For Windows:
cmd
set OPENAI_API_KEY="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"

Step 2: Modify Your Flask Code
Now, modify your Flask application to read the API key from the environment variable:

from flask import Flask, jsonify, render_template, request
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain_openai import OpenAI
import os  # Import os to access environment variables

app = Flask(__name__)

@app.route('/')
def index():
    return render_template("index.html")

@app.route('/generate', methods=['POST'])  # Only allow POST for this route
def generate():
    # Get the OpenAI API key from the environment variable
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    
    if OPENAI_API_KEY is None:
        return jsonify(error="OpenAI API key is not set."), 500  # Return an error response if the key is not set

    # Get the prompt from the request
    user_input = request.get_json().get('text')  # Ensure the key matches what you send from the client
    print(f"Received prompt: {user_input}")  # Debugging output

    # Create a prompt template
    prompt_template = PromptTemplate.from_template('Generate a blog on the topic: {text}')

    # Initialize the language model with the API key
    llm = OpenAI(api_key=OPENAI_API_KEY, temperature=0.9)

    # Create a chain with the language model and the prompt
    chain = LLMChain(llm=llm, prompt=prompt_template)

    try:
        # Run the chain with the user input
        output = chain.run(text=user_input)  # Pass the user input as 'text'
        return jsonify(output=output)  # Return the output as JSON
    except Exception as e:
        print(f"Error generating output: {e}")  # Log the error
        return jsonify(error="An error occurred while generating the article."), 500  # Return an error response

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

Key Changes Made:
Import os: This allows you to access environment variables.
Retrieve the API Key: Use os.getenv("OPENAI_API_KEY") to get the API key from the environment.
Error Handling: Added a check to ensure the API key is set, returning an error if it is not.
Running the Application
After making these changes, you can run your Flask application. Make sure to set the environment variable for the OpenAI API key before starting the app. This way, your API key remains secure and is not exposed in your source code.